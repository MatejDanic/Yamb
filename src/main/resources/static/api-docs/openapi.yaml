openapi: 3.0.0
info:
  title: Yamb API
  description: API for playing Yamb.
  version: 1.0.1
tags:
  - name: Games
    description: Operations related to game management
  - name: Logs
    description: Operations related to logging
  - name: Auth
    description: Authentication operations
  - name: Players
    description: Player-related operations
  - name: Scores
    description: Score-related operations
    
paths:
  /api/games:
    get:
      summary: Get all games
      tags:
        - Games
      responses:
        '200':
          description: List of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortGameResponse'
        '500':
          description: Internal server error

    put:
      summary: Create or get a game for the current player
      tags:
        - Games
      security:
        - bearerAuth: []
      requestBody:
        description: Game creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRequest'
      responses:
        '201':
          description: Game created
          headers:
            Location:
              description: URI of the created game
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '200':
          description: Existing game retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/games/{id}:
    get:
      summary: Get a game by its ID
      tags:
        - Games
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the game
          schema:
            type: string
      responses:
        '200':
          description: Game details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

    put:
      summary: Roll dice for the game
      tags:
        - Games
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the game
          schema:
            type: string
      requestBody:
        description: Action to perform on the game (rolling dice, etc.)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRequest'
      responses:
        '200':
          description: Dice rolled, game state updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '400':
          description: Bad request - Invalid dice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Roll limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Game is locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/games/{id}/announce:
    put:
      summary: Announce a box for the game
      tags:
        - Games
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the game
          schema:
            type: string
      requestBody:
        description: Action request to announce a box
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRequest'
      responses:
        '200':
          description: Announcement successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '400':
          description: Bad request - Invalid announcement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Announcement not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Game is locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/games/{id}/restart:
    put:
      summary: Restart a game
      tags:
        - Games
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the game
          schema:
            type: string
      responses:
        '200':
          description: Game restarted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '403':
          description: Forbidden - access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Roll limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Game is locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/games/{id}/archive:
    put:
      summary: Archive a game
      tags:
        - Games
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the game
          schema:
            type: string
      responses:
        '200':
          description: Game archived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '403':
          description: Forbidden - access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Game not completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Game is locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/games/{id}/complete:
    put:
      summary: Complete a game (admin only)
      tags:
        - Games
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the game
          schema:
            type: string
      responses:
        '200':
          description: Game completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '403':
          description: Forbidden - admin access only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Game is locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        description: User credentials for login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        description: User credentials for registration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '201':
          description: User registered
          headers:
            Location:
              description: URI of the registered user
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredPlayer'
        '400':
          description: Registration error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /auth/anonymous:
    post:
      summary: Create an anonymous player
      tags:
        - Auth
      requestBody:
        description: Anonymous player username
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameRequest'
      responses:
        '201':
          description: Anonymous player created
          headers:
            Location:
              description: URI of the created player
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/logs:
    get:
      summary: Get all logs
      tags:
        - Logs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogResponse'
        '403':
          description: Forbidden - admin access only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

    delete:
      summary: Delete all logs
      tags:
        - Logs
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logs deleted successfully
        '403':
          description: Forbidden - admin access only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
  
  /api/logs/{id}:
    get:
      summary: Get a log by its ID
      tags:
        - Logs
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the log
          schema:
            type: integer
      responses:
        '200':
          description: Log details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResponse'
        '403':
          description: Forbidden - admin access only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

    delete:
      summary: Delete a log by its ID
      tags:
        - Logs
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the log
          schema:
            type: integer
      responses:
        '204':
          description: Log deleted successfully
        '403':
          description: Forbidden - admin access only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/players:
    get:
      summary: Get all players
      tags:
        - Players
      responses:
        '200':
          description: List of all players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerResponse'
        '500':
          description: Internal server error

  /api/players/{id}:
    get:
      summary: Get player by ID
      tags:
        - Players
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the player
          schema:
            type: integer
      responses:
        '200':
          description: Player details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResponse'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/players/{id}/stats:
    get:
      summary: Get player stats by ID
      tags:
        - Players
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the player
          schema:
            type: integer
      responses:
        '200':
          description: Player statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api/playerstatsResponse'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/players/{id}/scores:
    get:
      summary: Get player scores by ID
      tags:
        - Players
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the player
          schema:
            type: integer
      responses:
        '200':
          description: List of scores for the player
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortScoreResponse'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/players/{id}/preferences:
    get:
      summary: Get player preferences by ID
      tags:
        - Players
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the player
          schema:
            type: integer
      responses:
        '200':
          description: Player preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerPreferencesResponse'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

    put:
      summary: Set player preferences by ID
      tags:
        - Players
      security:
        - bearerAuth: []
      requestBody:
        description: Player preferences to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerPreferencesRequest'
      responses:
        '200':
          description: Updated player preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerPreferencesResponse'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/scores:
    get:
      summary: Get all scores
      tags:
        - Scores
      responses:
        '200':
          description: List of all scores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoreResponse'
        '500':
          description: Internal server error

  /api/scores/{id}:
    get:
      summary: Get score by ID
      tags:
        - Scores
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the score
          schema:
            type: integer
      responses:
        '200':
          description: Score details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '404':
          description: Score not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error

  /api/scores/stats:
    get:
      summary: Get global score statistics
      tags:
        - Scores
      responses:
        '200':
          description: Global score statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalScoreStatsResponse'
        '500':
          description: Internal server error

  components:
    securitySchemes:

      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

    schemas:
      ActionRequest:
        type: object
        properties:
          diceToRoll:
            type: array
            items:
              type: integer
            description: Indices of dice to roll
            example: [0, 1, 2, 3, 4]
          columnType:
            type: string
            example: "DOWNWARDS"
          boxType:
            type: string
            example: "ONES"

      AuthRequest:
        type: object
        required:
          - username
          - password
        properties:
          username:
            type: string
            example: "player1"
          password:
            type: string
            format: password
            example: "password123"

      GameRequest:
        type: object
        required:
          - playerId
        properties:
          playerId:
            type: integer
            example: 1

      PlayerPreferencesRequest:
        type: object
        required:
          - language
          - theme
        properties:
          language:
            type: string
            example: "hr"
          theme:
            type: string
            example: "dark"

      AuthResponse:
        type: object
        properties:
          token:
            type: string
            example: "eyJhbGciOi..."
          player:
            $ref: '#/components/schemas/PlayerResponse'

      ErrorResponse: 
        type: object
        properties:
          status:
            type: integer
          error:
            type: string
          message:
            type: string
          timestamp:
            type: string
            format: date-time
          detail:
            type: string

      GameResponse:
        type: object
        properties:
          id:
            type: string
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          playerId:
            type: number
          sheet:
            type: object
            properties:
              columns:
                type: array
                items:
                  $ref: '#/components/schemas/Column'
          dices:
            type: array
            items:
              $ref: '#/components/schemas/Dice'
          rollCount:
            type: integer
          announcement:
            type: string
          status:
            type: string
            enum: [IN_PROGRESS, COMPLETED, ARCHIVED]
          totalSum:
            type: integer

      GlobalPlayerStatsResponse:
        type: object
        properties:
          playerCount:
            type: integer
          mostScoresByAnyPlayer:
            type: integer
          playerWithMostScores:
            $ref: '#/components/schemas/PlayerResponse'
          highestAverageScoreByAnyPlayer:
            type: number
          playerWithHighestAverageScore:
            $ref: '#/components/schemas/PlayerResponse'
          highScore:
            $ref: '#/components/schemas/ScoreResponse'
          newestPlayer:
            $ref: '#/components/schemas/PlayerResponse'
          oldestPlayer:
            $ref: '#/components/schemas/PlayerResponse'
          
      GlobalScoreStatsResponse:
        type: object
        properties:
          scoreCount:
            type: number
          averageScore:
            type: number
          highScore:
            $ref: '#/components/schemas/ScoreResponse'
          topToday:
            type: array
            items:
              $ref: '#/components/schemas/ScoreResponse'
          topThisWeek:
            type: array
            items:
              $ref: '#/components/schemas/ScoreResponse'
          topThisMonth:
            type: array
            items:
              $ref: '#/components/schemas/ScoreResponse'
          topThisYear:
            type: array
            items:
              $ref: '#/components/schemas/ScoreResponse'
          topAllTime:
            type: array
            items:
              $ref: '#/components/schemas/ScoreResponse'

      LogResponse:
        type: object
        properties:
          id:
            type: integer
          createdAt:
            type: string
            format: date-time
          player:
            $ref: '#/components/schemas/ShortPlayerResponse'
          data:
            type: object
          message: 
            type: string  
          level:
            type: string
            enum: [INFO, WARN, ERROR]

      PlayerPreferencesResponse: 
        type: object
        properties:
          language:
            type: string
            example: "hr"
          theme:
            type: string
            example: "dark"

      PlayerResponse:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          roles: 
            type: array
            items:
              $ref: '#/components/schemas/RoleResponse'
          isRegistered:
            type: boolean

      PlayerStatsResponse:
        type: object
        properties:
          lastActivity:
            type: string
            format: date-time
          averageScore:
            type: number
          highScore:
            $ref: '#/components/schemas/ScoreResponse'
          scoreCount:
            type: integer

      RoleResponse: 
        type: object
        properties:
          name:
            type: string
          description:
            type: string

      ScoreResponse:
        type: object
        properties:
          id:
            type: integer
            format: int64
          createdAt:
            type: string
            format: date-time
          player:
            $ref: '#/components/schemas/ShortPlayerResponse'
          value:
            type: integer

      ShortGameResponse:
        type: object
        properties:
          id:
            type: string
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          playerId:
            type: number
          status:
            type: string
            enum: [IN_PROGRESS, COMPLETED, ARCHIVED]
          totalSum:
            type: integer

      ShortPlayerResponse:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string

      ShortScoreResponse:
        type: object
        properties:
          id:
            type: integer
          createdAt:
            type: string
            format: date-time
          value:
            type: integer

      Dice: 
        type: object
        properties:
          index:
            type: integer
          value:
            type: integer

      Sheet:
        type: object
        properties:
          columns:
            type: array
            items:
              $ref: '#/components/schemas/Column'

      Column:
        type: object
        properties:
          type:
            type: string
            enum: [DOWNWARDS, UPWARDS, FREE, ANNOUNCEMENT]
          boxes:
            type: array
            items:
              $ref: '#/components/schemas/Box'

      Box:
        type: object
        properties:
          type:
            type: string
            enum: [ONES, TWOS, THREES, FOURS, FIVES, SIXES, MAX, MIN, TRIPS, STRAIGHT, BOAT, CARRIAGE, YAMB]
          value:
            type: integer

  security:
    - bearerAuth: []
